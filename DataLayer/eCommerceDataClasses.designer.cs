#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ECOM_DBase")]
	public partial class eCommerceDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertADDR_ADDRESS(ADDR_ADDRESS instance);
    partial void UpdateADDR_ADDRESS(ADDR_ADDRESS instance);
    partial void DeleteADDR_ADDRESS(ADDR_ADDRESS instance);
    partial void InsertBASKT_BASKET(BASKT_BASKET instance);
    partial void UpdateBASKT_BASKET(BASKT_BASKET instance);
    partial void DeleteBASKT_BASKET(BASKT_BASKET instance);
    partial void InsertCITY_CITY(CITY_CITY instance);
    partial void UpdateCITY_CITY(CITY_CITY instance);
    partial void DeleteCITY_CITY(CITY_CITY instance);
    partial void InsertCAT_CATEGORY(CAT_CATEGORY instance);
    partial void UpdateCAT_CATEGORY(CAT_CATEGORY instance);
    partial void DeleteCAT_CATEGORY(CAT_CATEGORY instance);
    partial void InsertCNTR_COUNTRY(CNTR_COUNTRY instance);
    partial void UpdateCNTR_COUNTRY(CNTR_COUNTRY instance);
    partial void DeleteCNTR_COUNTRY(CNTR_COUNTRY instance);
    partial void InsertCOMM_COMMENT(COMM_COMMENT instance);
    partial void UpdateCOMM_COMMENT(COMM_COMMENT instance);
    partial void DeleteCOMM_COMMENT(COMM_COMMENT instance);
    partial void InsertCOUP_COUPON(COUP_COUPON instance);
    partial void UpdateCOUP_COUPON(COUP_COUPON instance);
    partial void DeleteCOUP_COUPON(COUP_COUPON instance);
    partial void InsertDETOR_ORDERDETAIL(DETOR_ORDERDETAIL instance);
    partial void UpdateDETOR_ORDERDETAIL(DETOR_ORDERDETAIL instance);
    partial void DeleteDETOR_ORDERDETAIL(DETOR_ORDERDETAIL instance);
    partial void InsertMAN_MANUFACTURER(MAN_MANUFACTURER instance);
    partial void UpdateMAN_MANUFACTURER(MAN_MANUFACTURER instance);
    partial void DeleteMAN_MANUFACTURER(MAN_MANUFACTURER instance);
    partial void InsertORDER_ORDER(ORDER_ORDER instance);
    partial void UpdateORDER_ORDER(ORDER_ORDER instance);
    partial void DeleteORDER_ORDER(ORDER_ORDER instance);
    partial void InsertPIC_PRODUCTPICTURE(PIC_PRODUCTPICTURE instance);
    partial void UpdatePIC_PRODUCTPICTURE(PIC_PRODUCTPICTURE instance);
    partial void DeletePIC_PRODUCTPICTURE(PIC_PRODUCTPICTURE instance);
    partial void InsertPROD_PRODUCT(PROD_PRODUCT instance);
    partial void UpdatePROD_PRODUCT(PROD_PRODUCT instance);
    partial void DeletePROD_PRODUCT(PROD_PRODUCT instance);
    partial void InsertTAG_TAG(TAG_TAG instance);
    partial void UpdateTAG_TAG(TAG_TAG instance);
    partial void DeleteTAG_TAG(TAG_TAG instance);
    partial void InsertTOWN_TOWN(TOWN_TOWN instance);
    partial void UpdateTOWN_TOWN(TOWN_TOWN instance);
    partial void DeleteTOWN_TOWN(TOWN_TOWN instance);
    partial void InsertUSER_USER(USER_USER instance);
    partial void UpdateUSER_USER(USER_USER instance);
    partial void DeleteUSER_USER(USER_USER instance);
    #endregion
		
		public eCommerceDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ECOM_DBaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public eCommerceDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public eCommerceDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public eCommerceDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public eCommerceDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ADDR_ADDRESS> ADDR_ADDRESSes
		{
			get
			{
				return this.GetTable<ADDR_ADDRESS>();
			}
		}
		
		public System.Data.Linq.Table<BASKT_BASKET> BASKT_BASKETs
		{
			get
			{
				return this.GetTable<BASKT_BASKET>();
			}
		}
		
		public System.Data.Linq.Table<CITY_CITY> CITY_CITies
		{
			get
			{
				return this.GetTable<CITY_CITY>();
			}
		}
		
		public System.Data.Linq.Table<CAT_CATEGORY> CAT_CATEGORies
		{
			get
			{
				return this.GetTable<CAT_CATEGORY>();
			}
		}
		
		public System.Data.Linq.Table<CNTR_COUNTRY> CNTR_COUNTRies
		{
			get
			{
				return this.GetTable<CNTR_COUNTRY>();
			}
		}
		
		public System.Data.Linq.Table<COMM_COMMENT> COMM_COMMENTs
		{
			get
			{
				return this.GetTable<COMM_COMMENT>();
			}
		}
		
		public System.Data.Linq.Table<COUP_COUPON> COUP_COUPONs
		{
			get
			{
				return this.GetTable<COUP_COUPON>();
			}
		}
		
		public System.Data.Linq.Table<DETOR_ORDERDETAIL> DETOR_ORDERDETAILs
		{
			get
			{
				return this.GetTable<DETOR_ORDERDETAIL>();
			}
		}
		
		public System.Data.Linq.Table<MAN_MANUFACTURER> MAN_MANUFACTURERs
		{
			get
			{
				return this.GetTable<MAN_MANUFACTURER>();
			}
		}
		
		public System.Data.Linq.Table<ORDER_ORDER> ORDER_ORDERs
		{
			get
			{
				return this.GetTable<ORDER_ORDER>();
			}
		}
		
		public System.Data.Linq.Table<PIC_PRODUCTPICTURE> PIC_PRODUCTPICTUREs
		{
			get
			{
				return this.GetTable<PIC_PRODUCTPICTURE>();
			}
		}
		
		public System.Data.Linq.Table<PROD_PRODUCT> PROD_PRODUCTs
		{
			get
			{
				return this.GetTable<PROD_PRODUCT>();
			}
		}
		
		public System.Data.Linq.Table<TAG_TAG> TAG_TAGs
		{
			get
			{
				return this.GetTable<TAG_TAG>();
			}
		}
		
		public System.Data.Linq.Table<TOWN_TOWN> TOWN_TOWNs
		{
			get
			{
				return this.GetTable<TOWN_TOWN>();
			}
		}
		
		public System.Data.Linq.Table<USER_USER> USER_USERs
		{
			get
			{
				return this.GetTable<USER_USER>();
			}
		}
		
		public System.Data.Linq.Table<RandomView> RandomViews
		{
			get
			{
				return this.GetTable<RandomView>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetNewId", IsComposable=true)]
		public System.Nullable<System.Guid> GetNewId()
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ADDR_ADDRESS")]
	public partial class ADDR_ADDRESS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ADDR_ID;
		
		private string _ADDR_Alias;
		
		private int _ADDR_UserID;
		
		private int _ADDR_TownID;
		
		private string _ADDR_Address1;
		
		private string _ADDR_Name;
		
		private string _ADDR_Surname;
		
		private string _ADDR_Phone;
		
		private string _ADDR_GSM;
		
		private EntitySet<ORDER_ORDER> _ORDER_ORDERs;
		
		private EntityRef<TOWN_TOWN> _TOWN_TOWN;
		
		private EntityRef<USER_USER> _USER_USER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnADDR_IDChanging(int value);
    partial void OnADDR_IDChanged();
    partial void OnADDR_AliasChanging(string value);
    partial void OnADDR_AliasChanged();
    partial void OnADDR_UserIDChanging(int value);
    partial void OnADDR_UserIDChanged();
    partial void OnADDR_TownIDChanging(int value);
    partial void OnADDR_TownIDChanged();
    partial void OnADDR_Address1Changing(string value);
    partial void OnADDR_Address1Changed();
    partial void OnADDR_NameChanging(string value);
    partial void OnADDR_NameChanged();
    partial void OnADDR_SurnameChanging(string value);
    partial void OnADDR_SurnameChanged();
    partial void OnADDR_PhoneChanging(string value);
    partial void OnADDR_PhoneChanged();
    partial void OnADDR_GSMChanging(string value);
    partial void OnADDR_GSMChanged();
    #endregion
		
		public ADDR_ADDRESS()
		{
			this._ORDER_ORDERs = new EntitySet<ORDER_ORDER>(new Action<ORDER_ORDER>(this.attach_ORDER_ORDERs), new Action<ORDER_ORDER>(this.detach_ORDER_ORDERs));
			this._TOWN_TOWN = default(EntityRef<TOWN_TOWN>);
			this._USER_USER = default(EntityRef<USER_USER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDR_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ADDR_ID
		{
			get
			{
				return this._ADDR_ID;
			}
			set
			{
				if ((this._ADDR_ID != value))
				{
					this.OnADDR_IDChanging(value);
					this.SendPropertyChanging();
					this._ADDR_ID = value;
					this.SendPropertyChanged("ADDR_ID");
					this.OnADDR_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDR_Alias", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ADDR_Alias
		{
			get
			{
				return this._ADDR_Alias;
			}
			set
			{
				if ((this._ADDR_Alias != value))
				{
					this.OnADDR_AliasChanging(value);
					this.SendPropertyChanging();
					this._ADDR_Alias = value;
					this.SendPropertyChanged("ADDR_Alias");
					this.OnADDR_AliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDR_UserID", DbType="Int NOT NULL")]
		public int ADDR_UserID
		{
			get
			{
				return this._ADDR_UserID;
			}
			set
			{
				if ((this._ADDR_UserID != value))
				{
					if (this._USER_USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnADDR_UserIDChanging(value);
					this.SendPropertyChanging();
					this._ADDR_UserID = value;
					this.SendPropertyChanged("ADDR_UserID");
					this.OnADDR_UserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDR_TownID", DbType="Int NOT NULL")]
		public int ADDR_TownID
		{
			get
			{
				return this._ADDR_TownID;
			}
			set
			{
				if ((this._ADDR_TownID != value))
				{
					if (this._TOWN_TOWN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnADDR_TownIDChanging(value);
					this.SendPropertyChanging();
					this._ADDR_TownID = value;
					this.SendPropertyChanged("ADDR_TownID");
					this.OnADDR_TownIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ADDR_Address", Storage="_ADDR_Address1", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ADDR_Address1
		{
			get
			{
				return this._ADDR_Address1;
			}
			set
			{
				if ((this._ADDR_Address1 != value))
				{
					this.OnADDR_Address1Changing(value);
					this.SendPropertyChanging();
					this._ADDR_Address1 = value;
					this.SendPropertyChanged("ADDR_Address1");
					this.OnADDR_Address1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDR_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ADDR_Name
		{
			get
			{
				return this._ADDR_Name;
			}
			set
			{
				if ((this._ADDR_Name != value))
				{
					this.OnADDR_NameChanging(value);
					this.SendPropertyChanging();
					this._ADDR_Name = value;
					this.SendPropertyChanged("ADDR_Name");
					this.OnADDR_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDR_Surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ADDR_Surname
		{
			get
			{
				return this._ADDR_Surname;
			}
			set
			{
				if ((this._ADDR_Surname != value))
				{
					this.OnADDR_SurnameChanging(value);
					this.SendPropertyChanging();
					this._ADDR_Surname = value;
					this.SendPropertyChanged("ADDR_Surname");
					this.OnADDR_SurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDR_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ADDR_Phone
		{
			get
			{
				return this._ADDR_Phone;
			}
			set
			{
				if ((this._ADDR_Phone != value))
				{
					this.OnADDR_PhoneChanging(value);
					this.SendPropertyChanging();
					this._ADDR_Phone = value;
					this.SendPropertyChanged("ADDR_Phone");
					this.OnADDR_PhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDR_GSM", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ADDR_GSM
		{
			get
			{
				return this._ADDR_GSM;
			}
			set
			{
				if ((this._ADDR_GSM != value))
				{
					this.OnADDR_GSMChanging(value);
					this.SendPropertyChanging();
					this._ADDR_GSM = value;
					this.SendPropertyChanged("ADDR_GSM");
					this.OnADDR_GSMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ADDR_ADDRESS_ORDER_ORDER", Storage="_ORDER_ORDERs", ThisKey="ADDR_ID", OtherKey="ORDER_AddressID")]
		public EntitySet<ORDER_ORDER> ORDER_ORDERs
		{
			get
			{
				return this._ORDER_ORDERs;
			}
			set
			{
				this._ORDER_ORDERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TOWN_TOWN_ADDR_ADDRESS", Storage="_TOWN_TOWN", ThisKey="ADDR_TownID", OtherKey="TOWN_ID", IsForeignKey=true)]
		public TOWN_TOWN TOWN_TOWN
		{
			get
			{
				return this._TOWN_TOWN.Entity;
			}
			set
			{
				TOWN_TOWN previousValue = this._TOWN_TOWN.Entity;
				if (((previousValue != value) 
							|| (this._TOWN_TOWN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TOWN_TOWN.Entity = null;
						previousValue.ADDR_ADDRESSes.Remove(this);
					}
					this._TOWN_TOWN.Entity = value;
					if ((value != null))
					{
						value.ADDR_ADDRESSes.Add(this);
						this._ADDR_TownID = value.TOWN_ID;
					}
					else
					{
						this._ADDR_TownID = default(int);
					}
					this.SendPropertyChanged("TOWN_TOWN");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_USER_ADDR_ADDRESS", Storage="_USER_USER", ThisKey="ADDR_UserID", OtherKey="USER_ID", IsForeignKey=true)]
		public USER_USER USER_USER
		{
			get
			{
				return this._USER_USER.Entity;
			}
			set
			{
				USER_USER previousValue = this._USER_USER.Entity;
				if (((previousValue != value) 
							|| (this._USER_USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER_USER.Entity = null;
						previousValue.ADDR_ADDRESSes.Remove(this);
					}
					this._USER_USER.Entity = value;
					if ((value != null))
					{
						value.ADDR_ADDRESSes.Add(this);
						this._ADDR_UserID = value.USER_ID;
					}
					else
					{
						this._ADDR_UserID = default(int);
					}
					this.SendPropertyChanged("USER_USER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ORDER_ORDERs(ORDER_ORDER entity)
		{
			this.SendPropertyChanging();
			entity.ADDR_ADDRESS = this;
		}
		
		private void detach_ORDER_ORDERs(ORDER_ORDER entity)
		{
			this.SendPropertyChanging();
			entity.ADDR_ADDRESS = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BASKT_BASKET")]
	public partial class BASKT_BASKET : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BASKT_ID;
		
		private int _BASKT_UserID;
		
		private int _BASKT_ProdID;
		
		private int _BASKT_Unit;
		
		private EntityRef<PROD_PRODUCT> _PROD_PRODUCT;
		
		private EntityRef<USER_USER> _USER_USER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBASKT_IDChanging(int value);
    partial void OnBASKT_IDChanged();
    partial void OnBASKT_UserIDChanging(int value);
    partial void OnBASKT_UserIDChanged();
    partial void OnBASKT_ProdIDChanging(int value);
    partial void OnBASKT_ProdIDChanged();
    partial void OnBASKT_UnitChanging(int value);
    partial void OnBASKT_UnitChanged();
    #endregion
		
		public BASKT_BASKET()
		{
			this._PROD_PRODUCT = default(EntityRef<PROD_PRODUCT>);
			this._USER_USER = default(EntityRef<USER_USER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BASKT_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BASKT_ID
		{
			get
			{
				return this._BASKT_ID;
			}
			set
			{
				if ((this._BASKT_ID != value))
				{
					this.OnBASKT_IDChanging(value);
					this.SendPropertyChanging();
					this._BASKT_ID = value;
					this.SendPropertyChanged("BASKT_ID");
					this.OnBASKT_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BASKT_UserID", DbType="Int NOT NULL")]
		public int BASKT_UserID
		{
			get
			{
				return this._BASKT_UserID;
			}
			set
			{
				if ((this._BASKT_UserID != value))
				{
					if (this._USER_USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBASKT_UserIDChanging(value);
					this.SendPropertyChanging();
					this._BASKT_UserID = value;
					this.SendPropertyChanged("BASKT_UserID");
					this.OnBASKT_UserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BASKT_ProdID", DbType="Int NOT NULL")]
		public int BASKT_ProdID
		{
			get
			{
				return this._BASKT_ProdID;
			}
			set
			{
				if ((this._BASKT_ProdID != value))
				{
					if (this._PROD_PRODUCT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBASKT_ProdIDChanging(value);
					this.SendPropertyChanging();
					this._BASKT_ProdID = value;
					this.SendPropertyChanged("BASKT_ProdID");
					this.OnBASKT_ProdIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BASKT_Unit", DbType="Int NOT NULL")]
		public int BASKT_Unit
		{
			get
			{
				return this._BASKT_Unit;
			}
			set
			{
				if ((this._BASKT_Unit != value))
				{
					this.OnBASKT_UnitChanging(value);
					this.SendPropertyChanging();
					this._BASKT_Unit = value;
					this.SendPropertyChanged("BASKT_Unit");
					this.OnBASKT_UnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROD_PRODUCT_BASKT_BASKET", Storage="_PROD_PRODUCT", ThisKey="BASKT_ProdID", OtherKey="PROD_ID", IsForeignKey=true)]
		public PROD_PRODUCT PROD_PRODUCT
		{
			get
			{
				return this._PROD_PRODUCT.Entity;
			}
			set
			{
				PROD_PRODUCT previousValue = this._PROD_PRODUCT.Entity;
				if (((previousValue != value) 
							|| (this._PROD_PRODUCT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PROD_PRODUCT.Entity = null;
						previousValue.BASKT_BASKETs.Remove(this);
					}
					this._PROD_PRODUCT.Entity = value;
					if ((value != null))
					{
						value.BASKT_BASKETs.Add(this);
						this._BASKT_ProdID = value.PROD_ID;
					}
					else
					{
						this._BASKT_ProdID = default(int);
					}
					this.SendPropertyChanged("PROD_PRODUCT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_USER_BASKT_BASKET", Storage="_USER_USER", ThisKey="BASKT_UserID", OtherKey="USER_ID", IsForeignKey=true)]
		public USER_USER USER_USER
		{
			get
			{
				return this._USER_USER.Entity;
			}
			set
			{
				USER_USER previousValue = this._USER_USER.Entity;
				if (((previousValue != value) 
							|| (this._USER_USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER_USER.Entity = null;
						previousValue.BASKT_BASKETs.Remove(this);
					}
					this._USER_USER.Entity = value;
					if ((value != null))
					{
						value.BASKT_BASKETs.Add(this);
						this._BASKT_UserID = value.USER_ID;
					}
					else
					{
						this._BASKT_UserID = default(int);
					}
					this.SendPropertyChanged("USER_USER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CITY_CITY")]
	public partial class CITY_CITY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CITY_ID;
		
		private int _CITY_CountryID;
		
		private string _CITY_Name;
		
		private EntitySet<TOWN_TOWN> _TOWN_TOWNs;
		
		private EntityRef<CNTR_COUNTRY> _CNTR_COUNTRY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCITY_IDChanging(int value);
    partial void OnCITY_IDChanged();
    partial void OnCITY_CountryIDChanging(int value);
    partial void OnCITY_CountryIDChanged();
    partial void OnCITY_NameChanging(string value);
    partial void OnCITY_NameChanged();
    #endregion
		
		public CITY_CITY()
		{
			this._TOWN_TOWNs = new EntitySet<TOWN_TOWN>(new Action<TOWN_TOWN>(this.attach_TOWN_TOWNs), new Action<TOWN_TOWN>(this.detach_TOWN_TOWNs));
			this._CNTR_COUNTRY = default(EntityRef<CNTR_COUNTRY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CITY_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CITY_ID
		{
			get
			{
				return this._CITY_ID;
			}
			set
			{
				if ((this._CITY_ID != value))
				{
					this.OnCITY_IDChanging(value);
					this.SendPropertyChanging();
					this._CITY_ID = value;
					this.SendPropertyChanged("CITY_ID");
					this.OnCITY_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CITY_CountryID", DbType="Int NOT NULL")]
		public int CITY_CountryID
		{
			get
			{
				return this._CITY_CountryID;
			}
			set
			{
				if ((this._CITY_CountryID != value))
				{
					if (this._CNTR_COUNTRY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCITY_CountryIDChanging(value);
					this.SendPropertyChanging();
					this._CITY_CountryID = value;
					this.SendPropertyChanged("CITY_CountryID");
					this.OnCITY_CountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CITY_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CITY_Name
		{
			get
			{
				return this._CITY_Name;
			}
			set
			{
				if ((this._CITY_Name != value))
				{
					this.OnCITY_NameChanging(value);
					this.SendPropertyChanging();
					this._CITY_Name = value;
					this.SendPropertyChanged("CITY_Name");
					this.OnCITY_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CITY_CITY_TOWN_TOWN", Storage="_TOWN_TOWNs", ThisKey="CITY_ID", OtherKey="TOWN_CityID")]
		public EntitySet<TOWN_TOWN> TOWN_TOWNs
		{
			get
			{
				return this._TOWN_TOWNs;
			}
			set
			{
				this._TOWN_TOWNs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CNTR_COUNTRY_CITY_CITY", Storage="_CNTR_COUNTRY", ThisKey="CITY_CountryID", OtherKey="CNTR_ID", IsForeignKey=true)]
		public CNTR_COUNTRY CNTR_COUNTRY
		{
			get
			{
				return this._CNTR_COUNTRY.Entity;
			}
			set
			{
				CNTR_COUNTRY previousValue = this._CNTR_COUNTRY.Entity;
				if (((previousValue != value) 
							|| (this._CNTR_COUNTRY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CNTR_COUNTRY.Entity = null;
						previousValue.CITY_CITies.Remove(this);
					}
					this._CNTR_COUNTRY.Entity = value;
					if ((value != null))
					{
						value.CITY_CITies.Add(this);
						this._CITY_CountryID = value.CNTR_ID;
					}
					else
					{
						this._CITY_CountryID = default(int);
					}
					this.SendPropertyChanged("CNTR_COUNTRY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TOWN_TOWNs(TOWN_TOWN entity)
		{
			this.SendPropertyChanging();
			entity.CITY_CITY = this;
		}
		
		private void detach_TOWN_TOWNs(TOWN_TOWN entity)
		{
			this.SendPropertyChanging();
			entity.CITY_CITY = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CAT_CATEGORY")]
	public partial class CAT_CATEGORY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CAT_ID;
		
		private string _CAT_Name;
		
		private System.Nullable<int> _CAT_ParentCatID;
		
		private string _CAT_Icon;
		
		private string _CAT_Name_ENG;
		
		private EntitySet<CAT_CATEGORY> _CAT_CATEGORies;
		
		private EntitySet<COUP_COUPON> _COUP_COUPONs;
		
		private EntitySet<PROD_PRODUCT> _PROD_PRODUCTs;
		
		private EntityRef<CAT_CATEGORY> _CAT_CATEGORY1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCAT_IDChanging(int value);
    partial void OnCAT_IDChanged();
    partial void OnCAT_NameChanging(string value);
    partial void OnCAT_NameChanged();
    partial void OnCAT_ParentCatIDChanging(System.Nullable<int> value);
    partial void OnCAT_ParentCatIDChanged();
    partial void OnCAT_IconChanging(string value);
    partial void OnCAT_IconChanged();
    partial void OnCAT_Name_ENGChanging(string value);
    partial void OnCAT_Name_ENGChanged();
    #endregion
		
		public CAT_CATEGORY()
		{
			this._CAT_CATEGORies = new EntitySet<CAT_CATEGORY>(new Action<CAT_CATEGORY>(this.attach_CAT_CATEGORies), new Action<CAT_CATEGORY>(this.detach_CAT_CATEGORies));
			this._COUP_COUPONs = new EntitySet<COUP_COUPON>(new Action<COUP_COUPON>(this.attach_COUP_COUPONs), new Action<COUP_COUPON>(this.detach_COUP_COUPONs));
			this._PROD_PRODUCTs = new EntitySet<PROD_PRODUCT>(new Action<PROD_PRODUCT>(this.attach_PROD_PRODUCTs), new Action<PROD_PRODUCT>(this.detach_PROD_PRODUCTs));
			this._CAT_CATEGORY1 = default(EntityRef<CAT_CATEGORY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CAT_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CAT_ID
		{
			get
			{
				return this._CAT_ID;
			}
			set
			{
				if ((this._CAT_ID != value))
				{
					this.OnCAT_IDChanging(value);
					this.SendPropertyChanging();
					this._CAT_ID = value;
					this.SendPropertyChanged("CAT_ID");
					this.OnCAT_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CAT_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CAT_Name
		{
			get
			{
				return this._CAT_Name;
			}
			set
			{
				if ((this._CAT_Name != value))
				{
					this.OnCAT_NameChanging(value);
					this.SendPropertyChanging();
					this._CAT_Name = value;
					this.SendPropertyChanged("CAT_Name");
					this.OnCAT_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CAT_ParentCatID", DbType="Int")]
		public System.Nullable<int> CAT_ParentCatID
		{
			get
			{
				return this._CAT_ParentCatID;
			}
			set
			{
				if ((this._CAT_ParentCatID != value))
				{
					if (this._CAT_CATEGORY1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCAT_ParentCatIDChanging(value);
					this.SendPropertyChanging();
					this._CAT_ParentCatID = value;
					this.SendPropertyChanged("CAT_ParentCatID");
					this.OnCAT_ParentCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CAT_Icon", DbType="VarChar(MAX)")]
		public string CAT_Icon
		{
			get
			{
				return this._CAT_Icon;
			}
			set
			{
				if ((this._CAT_Icon != value))
				{
					this.OnCAT_IconChanging(value);
					this.SendPropertyChanging();
					this._CAT_Icon = value;
					this.SendPropertyChanged("CAT_Icon");
					this.OnCAT_IconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CAT_Name_ENG", CanBeNull=false)]
		public string CAT_Name_ENG
		{
			get
			{
				return this._CAT_Name_ENG;
			}
			set
			{
				if ((this._CAT_Name_ENG != value))
				{
					this.OnCAT_Name_ENGChanging(value);
					this.SendPropertyChanging();
					this._CAT_Name_ENG = value;
					this.SendPropertyChanged("CAT_Name_ENG");
					this.OnCAT_Name_ENGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CAT_CATEGORY_CAT_CATEGORY", Storage="_CAT_CATEGORies", ThisKey="CAT_ID", OtherKey="CAT_ParentCatID")]
		public EntitySet<CAT_CATEGORY> CAT_CATEGORies
		{
			get
			{
				return this._CAT_CATEGORies;
			}
			set
			{
				this._CAT_CATEGORies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CAT_CATEGORY_COUP_COUPON", Storage="_COUP_COUPONs", ThisKey="CAT_ID", OtherKey="COUP_CategoryID")]
		public EntitySet<COUP_COUPON> COUP_COUPONs
		{
			get
			{
				return this._COUP_COUPONs;
			}
			set
			{
				this._COUP_COUPONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CAT_CATEGORY_PROD_PRODUCT", Storage="_PROD_PRODUCTs", ThisKey="CAT_ID", OtherKey="PROD_CatID")]
		public EntitySet<PROD_PRODUCT> PROD_PRODUCTs
		{
			get
			{
				return this._PROD_PRODUCTs;
			}
			set
			{
				this._PROD_PRODUCTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CAT_CATEGORY_CAT_CATEGORY", Storage="_CAT_CATEGORY1", ThisKey="CAT_ParentCatID", OtherKey="CAT_ID", IsForeignKey=true)]
		public CAT_CATEGORY CAT_CATEGORY1
		{
			get
			{
				return this._CAT_CATEGORY1.Entity;
			}
			set
			{
				CAT_CATEGORY previousValue = this._CAT_CATEGORY1.Entity;
				if (((previousValue != value) 
							|| (this._CAT_CATEGORY1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CAT_CATEGORY1.Entity = null;
						previousValue.CAT_CATEGORies.Remove(this);
					}
					this._CAT_CATEGORY1.Entity = value;
					if ((value != null))
					{
						value.CAT_CATEGORies.Add(this);
						this._CAT_ParentCatID = value.CAT_ID;
					}
					else
					{
						this._CAT_ParentCatID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CAT_CATEGORY1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CAT_CATEGORies(CAT_CATEGORY entity)
		{
			this.SendPropertyChanging();
			entity.CAT_CATEGORY1 = this;
		}
		
		private void detach_CAT_CATEGORies(CAT_CATEGORY entity)
		{
			this.SendPropertyChanging();
			entity.CAT_CATEGORY1 = null;
		}
		
		private void attach_COUP_COUPONs(COUP_COUPON entity)
		{
			this.SendPropertyChanging();
			entity.CAT_CATEGORY = this;
		}
		
		private void detach_COUP_COUPONs(COUP_COUPON entity)
		{
			this.SendPropertyChanging();
			entity.CAT_CATEGORY = null;
		}
		
		private void attach_PROD_PRODUCTs(PROD_PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.CAT_CATEGORY = this;
		}
		
		private void detach_PROD_PRODUCTs(PROD_PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.CAT_CATEGORY = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CNTR_COUNTRY")]
	public partial class CNTR_COUNTRY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CNTR_ID;
		
		private string _CNTR_Name;
		
		private EntitySet<CITY_CITY> _CITY_CITies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCNTR_IDChanging(int value);
    partial void OnCNTR_IDChanged();
    partial void OnCNTR_NameChanging(string value);
    partial void OnCNTR_NameChanged();
    #endregion
		
		public CNTR_COUNTRY()
		{
			this._CITY_CITies = new EntitySet<CITY_CITY>(new Action<CITY_CITY>(this.attach_CITY_CITies), new Action<CITY_CITY>(this.detach_CITY_CITies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CNTR_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CNTR_ID
		{
			get
			{
				return this._CNTR_ID;
			}
			set
			{
				if ((this._CNTR_ID != value))
				{
					this.OnCNTR_IDChanging(value);
					this.SendPropertyChanging();
					this._CNTR_ID = value;
					this.SendPropertyChanged("CNTR_ID");
					this.OnCNTR_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CNTR_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CNTR_Name
		{
			get
			{
				return this._CNTR_Name;
			}
			set
			{
				if ((this._CNTR_Name != value))
				{
					this.OnCNTR_NameChanging(value);
					this.SendPropertyChanging();
					this._CNTR_Name = value;
					this.SendPropertyChanged("CNTR_Name");
					this.OnCNTR_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CNTR_COUNTRY_CITY_CITY", Storage="_CITY_CITies", ThisKey="CNTR_ID", OtherKey="CITY_CountryID")]
		public EntitySet<CITY_CITY> CITY_CITies
		{
			get
			{
				return this._CITY_CITies;
			}
			set
			{
				this._CITY_CITies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CITY_CITies(CITY_CITY entity)
		{
			this.SendPropertyChanging();
			entity.CNTR_COUNTRY = this;
		}
		
		private void detach_CITY_CITies(CITY_CITY entity)
		{
			this.SendPropertyChanging();
			entity.CNTR_COUNTRY = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.COMM_COMMENT")]
	public partial class COMM_COMMENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _COMM_ID;
		
		private int _COMM_ProdID;
		
		private int _COMM_UserID;
		
		private string _COMM_Tittle;
		
		private string _COMM_Message;
		
		private int _COMM_Vote;
		
		private EntityRef<PROD_PRODUCT> _PROD_PRODUCT;
		
		private EntityRef<USER_USER> _USER_USER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCOMM_IDChanging(int value);
    partial void OnCOMM_IDChanged();
    partial void OnCOMM_ProdIDChanging(int value);
    partial void OnCOMM_ProdIDChanged();
    partial void OnCOMM_UserIDChanging(int value);
    partial void OnCOMM_UserIDChanged();
    partial void OnCOMM_TittleChanging(string value);
    partial void OnCOMM_TittleChanged();
    partial void OnCOMM_MessageChanging(string value);
    partial void OnCOMM_MessageChanged();
    partial void OnCOMM_VoteChanging(int value);
    partial void OnCOMM_VoteChanged();
    #endregion
		
		public COMM_COMMENT()
		{
			this._PROD_PRODUCT = default(EntityRef<PROD_PRODUCT>);
			this._USER_USER = default(EntityRef<USER_USER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COMM_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int COMM_ID
		{
			get
			{
				return this._COMM_ID;
			}
			set
			{
				if ((this._COMM_ID != value))
				{
					this.OnCOMM_IDChanging(value);
					this.SendPropertyChanging();
					this._COMM_ID = value;
					this.SendPropertyChanged("COMM_ID");
					this.OnCOMM_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COMM_ProdID", DbType="Int NOT NULL")]
		public int COMM_ProdID
		{
			get
			{
				return this._COMM_ProdID;
			}
			set
			{
				if ((this._COMM_ProdID != value))
				{
					if (this._PROD_PRODUCT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCOMM_ProdIDChanging(value);
					this.SendPropertyChanging();
					this._COMM_ProdID = value;
					this.SendPropertyChanged("COMM_ProdID");
					this.OnCOMM_ProdIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COMM_UserID", DbType="Int NOT NULL")]
		public int COMM_UserID
		{
			get
			{
				return this._COMM_UserID;
			}
			set
			{
				if ((this._COMM_UserID != value))
				{
					if (this._USER_USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCOMM_UserIDChanging(value);
					this.SendPropertyChanging();
					this._COMM_UserID = value;
					this.SendPropertyChanged("COMM_UserID");
					this.OnCOMM_UserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COMM_Tittle", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string COMM_Tittle
		{
			get
			{
				return this._COMM_Tittle;
			}
			set
			{
				if ((this._COMM_Tittle != value))
				{
					this.OnCOMM_TittleChanging(value);
					this.SendPropertyChanging();
					this._COMM_Tittle = value;
					this.SendPropertyChanged("COMM_Tittle");
					this.OnCOMM_TittleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COMM_Message", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string COMM_Message
		{
			get
			{
				return this._COMM_Message;
			}
			set
			{
				if ((this._COMM_Message != value))
				{
					this.OnCOMM_MessageChanging(value);
					this.SendPropertyChanging();
					this._COMM_Message = value;
					this.SendPropertyChanged("COMM_Message");
					this.OnCOMM_MessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COMM_Vote", DbType="Int NOT NULL")]
		public int COMM_Vote
		{
			get
			{
				return this._COMM_Vote;
			}
			set
			{
				if ((this._COMM_Vote != value))
				{
					this.OnCOMM_VoteChanging(value);
					this.SendPropertyChanging();
					this._COMM_Vote = value;
					this.SendPropertyChanged("COMM_Vote");
					this.OnCOMM_VoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROD_PRODUCT_COMM_COMMENT", Storage="_PROD_PRODUCT", ThisKey="COMM_ProdID", OtherKey="PROD_ID", IsForeignKey=true)]
		public PROD_PRODUCT PROD_PRODUCT
		{
			get
			{
				return this._PROD_PRODUCT.Entity;
			}
			set
			{
				PROD_PRODUCT previousValue = this._PROD_PRODUCT.Entity;
				if (((previousValue != value) 
							|| (this._PROD_PRODUCT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PROD_PRODUCT.Entity = null;
						previousValue.COMM_COMMENTs.Remove(this);
					}
					this._PROD_PRODUCT.Entity = value;
					if ((value != null))
					{
						value.COMM_COMMENTs.Add(this);
						this._COMM_ProdID = value.PROD_ID;
					}
					else
					{
						this._COMM_ProdID = default(int);
					}
					this.SendPropertyChanged("PROD_PRODUCT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_USER_COMM_COMMENT", Storage="_USER_USER", ThisKey="COMM_UserID", OtherKey="USER_ID", IsForeignKey=true)]
		public USER_USER USER_USER
		{
			get
			{
				return this._USER_USER.Entity;
			}
			set
			{
				USER_USER previousValue = this._USER_USER.Entity;
				if (((previousValue != value) 
							|| (this._USER_USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER_USER.Entity = null;
						previousValue.COMM_COMMENTs.Remove(this);
					}
					this._USER_USER.Entity = value;
					if ((value != null))
					{
						value.COMM_COMMENTs.Add(this);
						this._COMM_UserID = value.USER_ID;
					}
					else
					{
						this._COMM_UserID = default(int);
					}
					this.SendPropertyChanged("USER_USER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.COUP_COUPON")]
	public partial class COUP_COUPON : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _COUP_ID;
		
		private int _COUP_UserID;
		
		private int _COUP_CategoryID;
		
		private string _COUP_Pass;
		
		private double _COUP_Value;
		
		private int _COUP_Status;
		
		private EntityRef<CAT_CATEGORY> _CAT_CATEGORY;
		
		private EntityRef<USER_USER> _USER_USER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCOUP_IDChanging(int value);
    partial void OnCOUP_IDChanged();
    partial void OnCOUP_UserIDChanging(int value);
    partial void OnCOUP_UserIDChanged();
    partial void OnCOUP_CategoryIDChanging(int value);
    partial void OnCOUP_CategoryIDChanged();
    partial void OnCOUP_PassChanging(string value);
    partial void OnCOUP_PassChanged();
    partial void OnCOUP_ValueChanging(double value);
    partial void OnCOUP_ValueChanged();
    partial void OnCOUP_StatusChanging(int value);
    partial void OnCOUP_StatusChanged();
    #endregion
		
		public COUP_COUPON()
		{
			this._CAT_CATEGORY = default(EntityRef<CAT_CATEGORY>);
			this._USER_USER = default(EntityRef<USER_USER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COUP_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int COUP_ID
		{
			get
			{
				return this._COUP_ID;
			}
			set
			{
				if ((this._COUP_ID != value))
				{
					this.OnCOUP_IDChanging(value);
					this.SendPropertyChanging();
					this._COUP_ID = value;
					this.SendPropertyChanged("COUP_ID");
					this.OnCOUP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COUP_UserID", DbType="Int NOT NULL")]
		public int COUP_UserID
		{
			get
			{
				return this._COUP_UserID;
			}
			set
			{
				if ((this._COUP_UserID != value))
				{
					if (this._USER_USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCOUP_UserIDChanging(value);
					this.SendPropertyChanging();
					this._COUP_UserID = value;
					this.SendPropertyChanged("COUP_UserID");
					this.OnCOUP_UserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COUP_CategoryID", DbType="Int NOT NULL")]
		public int COUP_CategoryID
		{
			get
			{
				return this._COUP_CategoryID;
			}
			set
			{
				if ((this._COUP_CategoryID != value))
				{
					if (this._CAT_CATEGORY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCOUP_CategoryIDChanging(value);
					this.SendPropertyChanging();
					this._COUP_CategoryID = value;
					this.SendPropertyChanged("COUP_CategoryID");
					this.OnCOUP_CategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COUP_Pass", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string COUP_Pass
		{
			get
			{
				return this._COUP_Pass;
			}
			set
			{
				if ((this._COUP_Pass != value))
				{
					this.OnCOUP_PassChanging(value);
					this.SendPropertyChanging();
					this._COUP_Pass = value;
					this.SendPropertyChanged("COUP_Pass");
					this.OnCOUP_PassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COUP_Value", DbType="Float NOT NULL")]
		public double COUP_Value
		{
			get
			{
				return this._COUP_Value;
			}
			set
			{
				if ((this._COUP_Value != value))
				{
					this.OnCOUP_ValueChanging(value);
					this.SendPropertyChanging();
					this._COUP_Value = value;
					this.SendPropertyChanged("COUP_Value");
					this.OnCOUP_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COUP_Status", DbType="Int NOT NULL")]
		public int COUP_Status
		{
			get
			{
				return this._COUP_Status;
			}
			set
			{
				if ((this._COUP_Status != value))
				{
					this.OnCOUP_StatusChanging(value);
					this.SendPropertyChanging();
					this._COUP_Status = value;
					this.SendPropertyChanged("COUP_Status");
					this.OnCOUP_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CAT_CATEGORY_COUP_COUPON", Storage="_CAT_CATEGORY", ThisKey="COUP_CategoryID", OtherKey="CAT_ID", IsForeignKey=true)]
		public CAT_CATEGORY CAT_CATEGORY
		{
			get
			{
				return this._CAT_CATEGORY.Entity;
			}
			set
			{
				CAT_CATEGORY previousValue = this._CAT_CATEGORY.Entity;
				if (((previousValue != value) 
							|| (this._CAT_CATEGORY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CAT_CATEGORY.Entity = null;
						previousValue.COUP_COUPONs.Remove(this);
					}
					this._CAT_CATEGORY.Entity = value;
					if ((value != null))
					{
						value.COUP_COUPONs.Add(this);
						this._COUP_CategoryID = value.CAT_ID;
					}
					else
					{
						this._COUP_CategoryID = default(int);
					}
					this.SendPropertyChanged("CAT_CATEGORY");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_USER_COUP_COUPON", Storage="_USER_USER", ThisKey="COUP_UserID", OtherKey="USER_ID", IsForeignKey=true)]
		public USER_USER USER_USER
		{
			get
			{
				return this._USER_USER.Entity;
			}
			set
			{
				USER_USER previousValue = this._USER_USER.Entity;
				if (((previousValue != value) 
							|| (this._USER_USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER_USER.Entity = null;
						previousValue.COUP_COUPONs.Remove(this);
					}
					this._USER_USER.Entity = value;
					if ((value != null))
					{
						value.COUP_COUPONs.Add(this);
						this._COUP_UserID = value.USER_ID;
					}
					else
					{
						this._COUP_UserID = default(int);
					}
					this.SendPropertyChanged("USER_USER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DETOR_ORDERDETAIL")]
	public partial class DETOR_ORDERDETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DETOR_ID;
		
		private int _DETOR_OrderID;
		
		private int _DETOR_ProductID;
		
		private int _DETOR_Unit;
		
		private EntityRef<ORDER_ORDER> _ORDER_ORDER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDETOR_IDChanging(int value);
    partial void OnDETOR_IDChanged();
    partial void OnDETOR_OrderIDChanging(int value);
    partial void OnDETOR_OrderIDChanged();
    partial void OnDETOR_ProductIDChanging(int value);
    partial void OnDETOR_ProductIDChanged();
    partial void OnDETOR_UnitChanging(int value);
    partial void OnDETOR_UnitChanged();
    #endregion
		
		public DETOR_ORDERDETAIL()
		{
			this._ORDER_ORDER = default(EntityRef<ORDER_ORDER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DETOR_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DETOR_ID
		{
			get
			{
				return this._DETOR_ID;
			}
			set
			{
				if ((this._DETOR_ID != value))
				{
					this.OnDETOR_IDChanging(value);
					this.SendPropertyChanging();
					this._DETOR_ID = value;
					this.SendPropertyChanged("DETOR_ID");
					this.OnDETOR_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DETOR_OrderID", DbType="Int NOT NULL")]
		public int DETOR_OrderID
		{
			get
			{
				return this._DETOR_OrderID;
			}
			set
			{
				if ((this._DETOR_OrderID != value))
				{
					if (this._ORDER_ORDER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDETOR_OrderIDChanging(value);
					this.SendPropertyChanging();
					this._DETOR_OrderID = value;
					this.SendPropertyChanged("DETOR_OrderID");
					this.OnDETOR_OrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DETOR_ProductID", DbType="Int NOT NULL")]
		public int DETOR_ProductID
		{
			get
			{
				return this._DETOR_ProductID;
			}
			set
			{
				if ((this._DETOR_ProductID != value))
				{
					this.OnDETOR_ProductIDChanging(value);
					this.SendPropertyChanging();
					this._DETOR_ProductID = value;
					this.SendPropertyChanged("DETOR_ProductID");
					this.OnDETOR_ProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DETOR_Unit", DbType="Int NOT NULL")]
		public int DETOR_Unit
		{
			get
			{
				return this._DETOR_Unit;
			}
			set
			{
				if ((this._DETOR_Unit != value))
				{
					this.OnDETOR_UnitChanging(value);
					this.SendPropertyChanging();
					this._DETOR_Unit = value;
					this.SendPropertyChanged("DETOR_Unit");
					this.OnDETOR_UnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDER_ORDER_DETOR_ORDERDETAIL", Storage="_ORDER_ORDER", ThisKey="DETOR_OrderID", OtherKey="ORDER_ID", IsForeignKey=true)]
		public ORDER_ORDER ORDER_ORDER
		{
			get
			{
				return this._ORDER_ORDER.Entity;
			}
			set
			{
				ORDER_ORDER previousValue = this._ORDER_ORDER.Entity;
				if (((previousValue != value) 
							|| (this._ORDER_ORDER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ORDER_ORDER.Entity = null;
						previousValue.DETOR_ORDERDETAILs.Remove(this);
					}
					this._ORDER_ORDER.Entity = value;
					if ((value != null))
					{
						value.DETOR_ORDERDETAILs.Add(this);
						this._DETOR_OrderID = value.ORDER_ID;
					}
					else
					{
						this._DETOR_OrderID = default(int);
					}
					this.SendPropertyChanged("ORDER_ORDER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MAN_MANUFACTURER")]
	public partial class MAN_MANUFACTURER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MAN_ID;
		
		private string _MAN_Name;
		
		private string _MAN_Picture;
		
		private System.Nullable<System.DateTime> _MAN_StartTime;
		
		private System.Nullable<System.DateTime> _MAN_EndTime;
		
		private EntitySet<PROD_PRODUCT> _PROD_PRODUCTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAN_IDChanging(int value);
    partial void OnMAN_IDChanged();
    partial void OnMAN_NameChanging(string value);
    partial void OnMAN_NameChanged();
    partial void OnMAN_PictureChanging(string value);
    partial void OnMAN_PictureChanged();
    partial void OnMAN_StartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnMAN_StartTimeChanged();
    partial void OnMAN_EndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnMAN_EndTimeChanged();
    #endregion
		
		public MAN_MANUFACTURER()
		{
			this._PROD_PRODUCTs = new EntitySet<PROD_PRODUCT>(new Action<PROD_PRODUCT>(this.attach_PROD_PRODUCTs), new Action<PROD_PRODUCT>(this.detach_PROD_PRODUCTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAN_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MAN_ID
		{
			get
			{
				return this._MAN_ID;
			}
			set
			{
				if ((this._MAN_ID != value))
				{
					this.OnMAN_IDChanging(value);
					this.SendPropertyChanging();
					this._MAN_ID = value;
					this.SendPropertyChanged("MAN_ID");
					this.OnMAN_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAN_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MAN_Name
		{
			get
			{
				return this._MAN_Name;
			}
			set
			{
				if ((this._MAN_Name != value))
				{
					this.OnMAN_NameChanging(value);
					this.SendPropertyChanging();
					this._MAN_Name = value;
					this.SendPropertyChanged("MAN_Name");
					this.OnMAN_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAN_Picture", DbType="VarChar(MAX)")]
		public string MAN_Picture
		{
			get
			{
				return this._MAN_Picture;
			}
			set
			{
				if ((this._MAN_Picture != value))
				{
					this.OnMAN_PictureChanging(value);
					this.SendPropertyChanging();
					this._MAN_Picture = value;
					this.SendPropertyChanged("MAN_Picture");
					this.OnMAN_PictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAN_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> MAN_StartTime
		{
			get
			{
				return this._MAN_StartTime;
			}
			set
			{
				if ((this._MAN_StartTime != value))
				{
					this.OnMAN_StartTimeChanging(value);
					this.SendPropertyChanging();
					this._MAN_StartTime = value;
					this.SendPropertyChanged("MAN_StartTime");
					this.OnMAN_StartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAN_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> MAN_EndTime
		{
			get
			{
				return this._MAN_EndTime;
			}
			set
			{
				if ((this._MAN_EndTime != value))
				{
					this.OnMAN_EndTimeChanging(value);
					this.SendPropertyChanging();
					this._MAN_EndTime = value;
					this.SendPropertyChanged("MAN_EndTime");
					this.OnMAN_EndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MAN_MANUFACTURER_PROD_PRODUCT", Storage="_PROD_PRODUCTs", ThisKey="MAN_ID", OtherKey="PROD_ManID")]
		public EntitySet<PROD_PRODUCT> PROD_PRODUCTs
		{
			get
			{
				return this._PROD_PRODUCTs;
			}
			set
			{
				this._PROD_PRODUCTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PROD_PRODUCTs(PROD_PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.MAN_MANUFACTURER = this;
		}
		
		private void detach_PROD_PRODUCTs(PROD_PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.MAN_MANUFACTURER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ORDER_ORDER")]
	public partial class ORDER_ORDER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ORDER_ID;
		
		private int _ORDER_UserID;
		
		private int _ORDER_AddressID;
		
		private double _ORDER_TotalPrice;
		
		private System.Nullable<double> _ORDER_Tax;
		
		private string _ORDER_ShortInfo;
		
		private EntitySet<DETOR_ORDERDETAIL> _DETOR_ORDERDETAILs;
		
		private EntityRef<ADDR_ADDRESS> _ADDR_ADDRESS;
		
		private EntityRef<USER_USER> _USER_USER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnORDER_IDChanging(int value);
    partial void OnORDER_IDChanged();
    partial void OnORDER_UserIDChanging(int value);
    partial void OnORDER_UserIDChanged();
    partial void OnORDER_AddressIDChanging(int value);
    partial void OnORDER_AddressIDChanged();
    partial void OnORDER_TotalPriceChanging(double value);
    partial void OnORDER_TotalPriceChanged();
    partial void OnORDER_TaxChanging(System.Nullable<double> value);
    partial void OnORDER_TaxChanged();
    partial void OnORDER_ShortInfoChanging(string value);
    partial void OnORDER_ShortInfoChanged();
    #endregion
		
		public ORDER_ORDER()
		{
			this._DETOR_ORDERDETAILs = new EntitySet<DETOR_ORDERDETAIL>(new Action<DETOR_ORDERDETAIL>(this.attach_DETOR_ORDERDETAILs), new Action<DETOR_ORDERDETAIL>(this.detach_DETOR_ORDERDETAILs));
			this._ADDR_ADDRESS = default(EntityRef<ADDR_ADDRESS>);
			this._USER_USER = default(EntityRef<USER_USER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ORDER_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ORDER_ID
		{
			get
			{
				return this._ORDER_ID;
			}
			set
			{
				if ((this._ORDER_ID != value))
				{
					this.OnORDER_IDChanging(value);
					this.SendPropertyChanging();
					this._ORDER_ID = value;
					this.SendPropertyChanged("ORDER_ID");
					this.OnORDER_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ORDER_UserID", DbType="Int NOT NULL")]
		public int ORDER_UserID
		{
			get
			{
				return this._ORDER_UserID;
			}
			set
			{
				if ((this._ORDER_UserID != value))
				{
					if (this._USER_USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnORDER_UserIDChanging(value);
					this.SendPropertyChanging();
					this._ORDER_UserID = value;
					this.SendPropertyChanged("ORDER_UserID");
					this.OnORDER_UserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ORDER_AddressID", DbType="Int NOT NULL")]
		public int ORDER_AddressID
		{
			get
			{
				return this._ORDER_AddressID;
			}
			set
			{
				if ((this._ORDER_AddressID != value))
				{
					if (this._ADDR_ADDRESS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnORDER_AddressIDChanging(value);
					this.SendPropertyChanging();
					this._ORDER_AddressID = value;
					this.SendPropertyChanged("ORDER_AddressID");
					this.OnORDER_AddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ORDER_TotalPrice", DbType="Float NOT NULL")]
		public double ORDER_TotalPrice
		{
			get
			{
				return this._ORDER_TotalPrice;
			}
			set
			{
				if ((this._ORDER_TotalPrice != value))
				{
					this.OnORDER_TotalPriceChanging(value);
					this.SendPropertyChanging();
					this._ORDER_TotalPrice = value;
					this.SendPropertyChanged("ORDER_TotalPrice");
					this.OnORDER_TotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ORDER_Tax", DbType="Float")]
		public System.Nullable<double> ORDER_Tax
		{
			get
			{
				return this._ORDER_Tax;
			}
			set
			{
				if ((this._ORDER_Tax != value))
				{
					this.OnORDER_TaxChanging(value);
					this.SendPropertyChanging();
					this._ORDER_Tax = value;
					this.SendPropertyChanged("ORDER_Tax");
					this.OnORDER_TaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ORDER_ShortInfo", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ORDER_ShortInfo
		{
			get
			{
				return this._ORDER_ShortInfo;
			}
			set
			{
				if ((this._ORDER_ShortInfo != value))
				{
					this.OnORDER_ShortInfoChanging(value);
					this.SendPropertyChanging();
					this._ORDER_ShortInfo = value;
					this.SendPropertyChanged("ORDER_ShortInfo");
					this.OnORDER_ShortInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDER_ORDER_DETOR_ORDERDETAIL", Storage="_DETOR_ORDERDETAILs", ThisKey="ORDER_ID", OtherKey="DETOR_OrderID")]
		public EntitySet<DETOR_ORDERDETAIL> DETOR_ORDERDETAILs
		{
			get
			{
				return this._DETOR_ORDERDETAILs;
			}
			set
			{
				this._DETOR_ORDERDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ADDR_ADDRESS_ORDER_ORDER", Storage="_ADDR_ADDRESS", ThisKey="ORDER_AddressID", OtherKey="ADDR_ID", IsForeignKey=true)]
		public ADDR_ADDRESS ADDR_ADDRESS
		{
			get
			{
				return this._ADDR_ADDRESS.Entity;
			}
			set
			{
				ADDR_ADDRESS previousValue = this._ADDR_ADDRESS.Entity;
				if (((previousValue != value) 
							|| (this._ADDR_ADDRESS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ADDR_ADDRESS.Entity = null;
						previousValue.ORDER_ORDERs.Remove(this);
					}
					this._ADDR_ADDRESS.Entity = value;
					if ((value != null))
					{
						value.ORDER_ORDERs.Add(this);
						this._ORDER_AddressID = value.ADDR_ID;
					}
					else
					{
						this._ORDER_AddressID = default(int);
					}
					this.SendPropertyChanged("ADDR_ADDRESS");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_USER_ORDER_ORDER", Storage="_USER_USER", ThisKey="ORDER_UserID", OtherKey="USER_ID", IsForeignKey=true)]
		public USER_USER USER_USER
		{
			get
			{
				return this._USER_USER.Entity;
			}
			set
			{
				USER_USER previousValue = this._USER_USER.Entity;
				if (((previousValue != value) 
							|| (this._USER_USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER_USER.Entity = null;
						previousValue.ORDER_ORDERs.Remove(this);
					}
					this._USER_USER.Entity = value;
					if ((value != null))
					{
						value.ORDER_ORDERs.Add(this);
						this._ORDER_UserID = value.USER_ID;
					}
					else
					{
						this._ORDER_UserID = default(int);
					}
					this.SendPropertyChanged("USER_USER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DETOR_ORDERDETAILs(DETOR_ORDERDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.ORDER_ORDER = this;
		}
		
		private void detach_DETOR_ORDERDETAILs(DETOR_ORDERDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.ORDER_ORDER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PIC_PRODUCTPICTURE")]
	public partial class PIC_PRODUCTPICTURE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PIC_ID;
		
		private int _PIC_ProdID;
		
		private string _PIC_PictureURL;
		
		private int _PIC_Order;
		
		private EntityRef<PROD_PRODUCT> _PROD_PRODUCT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPIC_IDChanging(int value);
    partial void OnPIC_IDChanged();
    partial void OnPIC_ProdIDChanging(int value);
    partial void OnPIC_ProdIDChanged();
    partial void OnPIC_PictureURLChanging(string value);
    partial void OnPIC_PictureURLChanged();
    partial void OnPIC_OrderChanging(int value);
    partial void OnPIC_OrderChanged();
    #endregion
		
		public PIC_PRODUCTPICTURE()
		{
			this._PROD_PRODUCT = default(EntityRef<PROD_PRODUCT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PIC_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PIC_ID
		{
			get
			{
				return this._PIC_ID;
			}
			set
			{
				if ((this._PIC_ID != value))
				{
					this.OnPIC_IDChanging(value);
					this.SendPropertyChanging();
					this._PIC_ID = value;
					this.SendPropertyChanged("PIC_ID");
					this.OnPIC_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PIC_ProdID", DbType="Int NOT NULL")]
		public int PIC_ProdID
		{
			get
			{
				return this._PIC_ProdID;
			}
			set
			{
				if ((this._PIC_ProdID != value))
				{
					if (this._PROD_PRODUCT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPIC_ProdIDChanging(value);
					this.SendPropertyChanging();
					this._PIC_ProdID = value;
					this.SendPropertyChanged("PIC_ProdID");
					this.OnPIC_ProdIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PIC_PictureURL", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PIC_PictureURL
		{
			get
			{
				return this._PIC_PictureURL;
			}
			set
			{
				if ((this._PIC_PictureURL != value))
				{
					this.OnPIC_PictureURLChanging(value);
					this.SendPropertyChanging();
					this._PIC_PictureURL = value;
					this.SendPropertyChanged("PIC_PictureURL");
					this.OnPIC_PictureURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PIC_Order", DbType="Int NOT NULL")]
		public int PIC_Order
		{
			get
			{
				return this._PIC_Order;
			}
			set
			{
				if ((this._PIC_Order != value))
				{
					this.OnPIC_OrderChanging(value);
					this.SendPropertyChanging();
					this._PIC_Order = value;
					this.SendPropertyChanged("PIC_Order");
					this.OnPIC_OrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROD_PRODUCT_PIC_PRODUCTPICTURE", Storage="_PROD_PRODUCT", ThisKey="PIC_ProdID", OtherKey="PROD_ID", IsForeignKey=true)]
		public PROD_PRODUCT PROD_PRODUCT
		{
			get
			{
				return this._PROD_PRODUCT.Entity;
			}
			set
			{
				PROD_PRODUCT previousValue = this._PROD_PRODUCT.Entity;
				if (((previousValue != value) 
							|| (this._PROD_PRODUCT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PROD_PRODUCT.Entity = null;
						previousValue.PIC_PRODUCTPICTUREs.Remove(this);
					}
					this._PROD_PRODUCT.Entity = value;
					if ((value != null))
					{
						value.PIC_PRODUCTPICTUREs.Add(this);
						this._PIC_ProdID = value.PROD_ID;
					}
					else
					{
						this._PIC_ProdID = default(int);
					}
					this.SendPropertyChanged("PROD_PRODUCT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PROD_PRODUCT")]
	public partial class PROD_PRODUCT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PROD_ID;
		
		private int _PROD_CatID;
		
		private int _PROD_ManID;
		
		private string _PROD_Name;
		
		private double _PROD_Price;
		
		private System.Nullable<double> _PROD_OldPrice;
		
		private string _PROD_ShortInformation;
		
		private string _PROD_Information;
		
		private int _PROD_StockCount;
		
		private bool _PROD_Iscampaign;
		
		private int _PROD_Like;
		
		private int _PROD_SaleCount;
		
		private string _PROD_Name_tr;
		
		private string _PROD_Information_tr;
		
		private EntitySet<BASKT_BASKET> _BASKT_BASKETs;
		
		private EntitySet<COMM_COMMENT> _COMM_COMMENTs;
		
		private EntitySet<PIC_PRODUCTPICTURE> _PIC_PRODUCTPICTUREs;
		
		private EntitySet<TAG_TAG> _TAG_TAGs;
		
		private EntityRef<CAT_CATEGORY> _CAT_CATEGORY;
		
		private EntityRef<MAN_MANUFACTURER> _MAN_MANUFACTURER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPROD_IDChanging(int value);
    partial void OnPROD_IDChanged();
    partial void OnPROD_CatIDChanging(int value);
    partial void OnPROD_CatIDChanged();
    partial void OnPROD_ManIDChanging(int value);
    partial void OnPROD_ManIDChanged();
    partial void OnPROD_NameChanging(string value);
    partial void OnPROD_NameChanged();
    partial void OnPROD_PriceChanging(double value);
    partial void OnPROD_PriceChanged();
    partial void OnPROD_OldPriceChanging(System.Nullable<double> value);
    partial void OnPROD_OldPriceChanged();
    partial void OnPROD_ShortInformationChanging(string value);
    partial void OnPROD_ShortInformationChanged();
    partial void OnPROD_InformationChanging(string value);
    partial void OnPROD_InformationChanged();
    partial void OnPROD_StockCountChanging(int value);
    partial void OnPROD_StockCountChanged();
    partial void OnPROD_IscampaignChanging(bool value);
    partial void OnPROD_IscampaignChanged();
    partial void OnPROD_LikeChanging(int value);
    partial void OnPROD_LikeChanged();
    partial void OnPROD_SaleCountChanging(int value);
    partial void OnPROD_SaleCountChanged();
    partial void OnPROD_Name_trChanging(string value);
    partial void OnPROD_Name_trChanged();
    partial void OnPROD_Information_trChanging(string value);
    partial void OnPROD_Information_trChanged();
    #endregion
		
		public PROD_PRODUCT()
		{
			this._BASKT_BASKETs = new EntitySet<BASKT_BASKET>(new Action<BASKT_BASKET>(this.attach_BASKT_BASKETs), new Action<BASKT_BASKET>(this.detach_BASKT_BASKETs));
			this._COMM_COMMENTs = new EntitySet<COMM_COMMENT>(new Action<COMM_COMMENT>(this.attach_COMM_COMMENTs), new Action<COMM_COMMENT>(this.detach_COMM_COMMENTs));
			this._PIC_PRODUCTPICTUREs = new EntitySet<PIC_PRODUCTPICTURE>(new Action<PIC_PRODUCTPICTURE>(this.attach_PIC_PRODUCTPICTUREs), new Action<PIC_PRODUCTPICTURE>(this.detach_PIC_PRODUCTPICTUREs));
			this._TAG_TAGs = new EntitySet<TAG_TAG>(new Action<TAG_TAG>(this.attach_TAG_TAGs), new Action<TAG_TAG>(this.detach_TAG_TAGs));
			this._CAT_CATEGORY = default(EntityRef<CAT_CATEGORY>);
			this._MAN_MANUFACTURER = default(EntityRef<MAN_MANUFACTURER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROD_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PROD_ID
		{
			get
			{
				return this._PROD_ID;
			}
			set
			{
				if ((this._PROD_ID != value))
				{
					this.OnPROD_IDChanging(value);
					this.SendPropertyChanging();
					this._PROD_ID = value;
					this.SendPropertyChanged("PROD_ID");
					this.OnPROD_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROD_CatID", DbType="Int NOT NULL")]
		public int PROD_CatID
		{
			get
			{
				return this._PROD_CatID;
			}
			set
			{
				if ((this._PROD_CatID != value))
				{
					if (this._CAT_CATEGORY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPROD_CatIDChanging(value);
					this.SendPropertyChanging();
					this._PROD_CatID = value;
					this.SendPropertyChanged("PROD_CatID");
					this.OnPROD_CatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROD_ManID", DbType="Int NOT NULL")]
		public int PROD_ManID
		{
			get
			{
				return this._PROD_ManID;
			}
			set
			{
				if ((this._PROD_ManID != value))
				{
					if (this._MAN_MANUFACTURER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPROD_ManIDChanging(value);
					this.SendPropertyChanging();
					this._PROD_ManID = value;
					this.SendPropertyChanged("PROD_ManID");
					this.OnPROD_ManIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROD_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PROD_Name
		{
			get
			{
				return this._PROD_Name;
			}
			set
			{
				if ((this._PROD_Name != value))
				{
					this.OnPROD_NameChanging(value);
					this.SendPropertyChanging();
					this._PROD_Name = value;
					this.SendPropertyChanged("PROD_Name");
					this.OnPROD_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROD_Price", DbType="Float NOT NULL")]
		public double PROD_Price
		{
			get
			{
				return this._PROD_Price;
			}
			set
			{
				if ((this._PROD_Price != value))
				{
					this.OnPROD_PriceChanging(value);
					this.SendPropertyChanging();
					this._PROD_Price = value;
					this.SendPropertyChanged("PROD_Price");
					this.OnPROD_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROD_OldPrice", DbType="Float")]
		public System.Nullable<double> PROD_OldPrice
		{
			get
			{
				return this._PROD_OldPrice;
			}
			set
			{
				if ((this._PROD_OldPrice != value))
				{
					this.OnPROD_OldPriceChanging(value);
					this.SendPropertyChanging();
					this._PROD_OldPrice = value;
					this.SendPropertyChanged("PROD_OldPrice");
					this.OnPROD_OldPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROD_ShortInformation", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string PROD_ShortInformation
		{
			get
			{
				return this._PROD_ShortInformation;
			}
			set
			{
				if ((this._PROD_ShortInformation != value))
				{
					this.OnPROD_ShortInformationChanging(value);
					this.SendPropertyChanging();
					this._PROD_ShortInformation = value;
					this.SendPropertyChanged("PROD_ShortInformation");
					this.OnPROD_ShortInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROD_Information", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string PROD_Information
		{
			get
			{
				return this._PROD_Information;
			}
			set
			{
				if ((this._PROD_Information != value))
				{
					this.OnPROD_InformationChanging(value);
					this.SendPropertyChanging();
					this._PROD_Information = value;
					this.SendPropertyChanged("PROD_Information");
					this.OnPROD_InformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROD_StockCount", DbType="Int NOT NULL")]
		public int PROD_StockCount
		{
			get
			{
				return this._PROD_StockCount;
			}
			set
			{
				if ((this._PROD_StockCount != value))
				{
					this.OnPROD_StockCountChanging(value);
					this.SendPropertyChanging();
					this._PROD_StockCount = value;
					this.SendPropertyChanged("PROD_StockCount");
					this.OnPROD_StockCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROD_Iscampaign", DbType="Bit NOT NULL")]
		public bool PROD_Iscampaign
		{
			get
			{
				return this._PROD_Iscampaign;
			}
			set
			{
				if ((this._PROD_Iscampaign != value))
				{
					this.OnPROD_IscampaignChanging(value);
					this.SendPropertyChanging();
					this._PROD_Iscampaign = value;
					this.SendPropertyChanged("PROD_Iscampaign");
					this.OnPROD_IscampaignChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROD_Like", DbType="Int NOT NULL")]
		public int PROD_Like
		{
			get
			{
				return this._PROD_Like;
			}
			set
			{
				if ((this._PROD_Like != value))
				{
					this.OnPROD_LikeChanging(value);
					this.SendPropertyChanging();
					this._PROD_Like = value;
					this.SendPropertyChanged("PROD_Like");
					this.OnPROD_LikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROD_SaleCount", DbType="Int NOT NULL")]
		public int PROD_SaleCount
		{
			get
			{
				return this._PROD_SaleCount;
			}
			set
			{
				if ((this._PROD_SaleCount != value))
				{
					this.OnPROD_SaleCountChanging(value);
					this.SendPropertyChanging();
					this._PROD_SaleCount = value;
					this.SendPropertyChanged("PROD_SaleCount");
					this.OnPROD_SaleCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROD_Name_tr", CanBeNull=false)]
		public string PROD_Name_tr
		{
			get
			{
				return this._PROD_Name_tr;
			}
			set
			{
				if ((this._PROD_Name_tr != value))
				{
					this.OnPROD_Name_trChanging(value);
					this.SendPropertyChanging();
					this._PROD_Name_tr = value;
					this.SendPropertyChanged("PROD_Name_tr");
					this.OnPROD_Name_trChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROD_Information_tr", CanBeNull=false)]
		public string PROD_Information_tr
		{
			get
			{
				return this._PROD_Information_tr;
			}
			set
			{
				if ((this._PROD_Information_tr != value))
				{
					this.OnPROD_Information_trChanging(value);
					this.SendPropertyChanging();
					this._PROD_Information_tr = value;
					this.SendPropertyChanged("PROD_Information_tr");
					this.OnPROD_Information_trChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROD_PRODUCT_BASKT_BASKET", Storage="_BASKT_BASKETs", ThisKey="PROD_ID", OtherKey="BASKT_ProdID")]
		public EntitySet<BASKT_BASKET> BASKT_BASKETs
		{
			get
			{
				return this._BASKT_BASKETs;
			}
			set
			{
				this._BASKT_BASKETs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROD_PRODUCT_COMM_COMMENT", Storage="_COMM_COMMENTs", ThisKey="PROD_ID", OtherKey="COMM_ProdID")]
		public EntitySet<COMM_COMMENT> COMM_COMMENTs
		{
			get
			{
				return this._COMM_COMMENTs;
			}
			set
			{
				this._COMM_COMMENTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROD_PRODUCT_PIC_PRODUCTPICTURE", Storage="_PIC_PRODUCTPICTUREs", ThisKey="PROD_ID", OtherKey="PIC_ProdID")]
		public EntitySet<PIC_PRODUCTPICTURE> PIC_PRODUCTPICTUREs
		{
			get
			{
				return this._PIC_PRODUCTPICTUREs;
			}
			set
			{
				this._PIC_PRODUCTPICTUREs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROD_PRODUCT_TAG_TAG", Storage="_TAG_TAGs", ThisKey="PROD_ID", OtherKey="TAG_ProdID")]
		public EntitySet<TAG_TAG> TAG_TAGs
		{
			get
			{
				return this._TAG_TAGs;
			}
			set
			{
				this._TAG_TAGs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CAT_CATEGORY_PROD_PRODUCT", Storage="_CAT_CATEGORY", ThisKey="PROD_CatID", OtherKey="CAT_ID", IsForeignKey=true)]
		public CAT_CATEGORY CAT_CATEGORY
		{
			get
			{
				return this._CAT_CATEGORY.Entity;
			}
			set
			{
				CAT_CATEGORY previousValue = this._CAT_CATEGORY.Entity;
				if (((previousValue != value) 
							|| (this._CAT_CATEGORY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CAT_CATEGORY.Entity = null;
						previousValue.PROD_PRODUCTs.Remove(this);
					}
					this._CAT_CATEGORY.Entity = value;
					if ((value != null))
					{
						value.PROD_PRODUCTs.Add(this);
						this._PROD_CatID = value.CAT_ID;
					}
					else
					{
						this._PROD_CatID = default(int);
					}
					this.SendPropertyChanged("CAT_CATEGORY");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MAN_MANUFACTURER_PROD_PRODUCT", Storage="_MAN_MANUFACTURER", ThisKey="PROD_ManID", OtherKey="MAN_ID", IsForeignKey=true)]
		public MAN_MANUFACTURER MAN_MANUFACTURER
		{
			get
			{
				return this._MAN_MANUFACTURER.Entity;
			}
			set
			{
				MAN_MANUFACTURER previousValue = this._MAN_MANUFACTURER.Entity;
				if (((previousValue != value) 
							|| (this._MAN_MANUFACTURER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MAN_MANUFACTURER.Entity = null;
						previousValue.PROD_PRODUCTs.Remove(this);
					}
					this._MAN_MANUFACTURER.Entity = value;
					if ((value != null))
					{
						value.PROD_PRODUCTs.Add(this);
						this._PROD_ManID = value.MAN_ID;
					}
					else
					{
						this._PROD_ManID = default(int);
					}
					this.SendPropertyChanged("MAN_MANUFACTURER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BASKT_BASKETs(BASKT_BASKET entity)
		{
			this.SendPropertyChanging();
			entity.PROD_PRODUCT = this;
		}
		
		private void detach_BASKT_BASKETs(BASKT_BASKET entity)
		{
			this.SendPropertyChanging();
			entity.PROD_PRODUCT = null;
		}
		
		private void attach_COMM_COMMENTs(COMM_COMMENT entity)
		{
			this.SendPropertyChanging();
			entity.PROD_PRODUCT = this;
		}
		
		private void detach_COMM_COMMENTs(COMM_COMMENT entity)
		{
			this.SendPropertyChanging();
			entity.PROD_PRODUCT = null;
		}
		
		private void attach_PIC_PRODUCTPICTUREs(PIC_PRODUCTPICTURE entity)
		{
			this.SendPropertyChanging();
			entity.PROD_PRODUCT = this;
		}
		
		private void detach_PIC_PRODUCTPICTUREs(PIC_PRODUCTPICTURE entity)
		{
			this.SendPropertyChanging();
			entity.PROD_PRODUCT = null;
		}
		
		private void attach_TAG_TAGs(TAG_TAG entity)
		{
			this.SendPropertyChanging();
			entity.PROD_PRODUCT = this;
		}
		
		private void detach_TAG_TAGs(TAG_TAG entity)
		{
			this.SendPropertyChanging();
			entity.PROD_PRODUCT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TAG_TAG")]
	public partial class TAG_TAG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TAG_ID;
		
		private string _TAG_Data;
		
		private int _TAG_ProdID;
		
		private EntityRef<PROD_PRODUCT> _PROD_PRODUCT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTAG_IDChanging(int value);
    partial void OnTAG_IDChanged();
    partial void OnTAG_DataChanging(string value);
    partial void OnTAG_DataChanged();
    partial void OnTAG_ProdIDChanging(int value);
    partial void OnTAG_ProdIDChanged();
    #endregion
		
		public TAG_TAG()
		{
			this._PROD_PRODUCT = default(EntityRef<PROD_PRODUCT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TAG_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TAG_ID
		{
			get
			{
				return this._TAG_ID;
			}
			set
			{
				if ((this._TAG_ID != value))
				{
					this.OnTAG_IDChanging(value);
					this.SendPropertyChanging();
					this._TAG_ID = value;
					this.SendPropertyChanged("TAG_ID");
					this.OnTAG_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TAG_Data", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TAG_Data
		{
			get
			{
				return this._TAG_Data;
			}
			set
			{
				if ((this._TAG_Data != value))
				{
					this.OnTAG_DataChanging(value);
					this.SendPropertyChanging();
					this._TAG_Data = value;
					this.SendPropertyChanged("TAG_Data");
					this.OnTAG_DataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TAG_ProdID", DbType="Int NOT NULL")]
		public int TAG_ProdID
		{
			get
			{
				return this._TAG_ProdID;
			}
			set
			{
				if ((this._TAG_ProdID != value))
				{
					if (this._PROD_PRODUCT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTAG_ProdIDChanging(value);
					this.SendPropertyChanging();
					this._TAG_ProdID = value;
					this.SendPropertyChanged("TAG_ProdID");
					this.OnTAG_ProdIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROD_PRODUCT_TAG_TAG", Storage="_PROD_PRODUCT", ThisKey="TAG_ProdID", OtherKey="PROD_ID", IsForeignKey=true)]
		public PROD_PRODUCT PROD_PRODUCT
		{
			get
			{
				return this._PROD_PRODUCT.Entity;
			}
			set
			{
				PROD_PRODUCT previousValue = this._PROD_PRODUCT.Entity;
				if (((previousValue != value) 
							|| (this._PROD_PRODUCT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PROD_PRODUCT.Entity = null;
						previousValue.TAG_TAGs.Remove(this);
					}
					this._PROD_PRODUCT.Entity = value;
					if ((value != null))
					{
						value.TAG_TAGs.Add(this);
						this._TAG_ProdID = value.PROD_ID;
					}
					else
					{
						this._TAG_ProdID = default(int);
					}
					this.SendPropertyChanged("PROD_PRODUCT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TOWN_TOWN")]
	public partial class TOWN_TOWN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TOWN_ID;
		
		private int _TOWN_CityID;
		
		private string _TOWN_Name;
		
		private EntitySet<ADDR_ADDRESS> _ADDR_ADDRESSes;
		
		private EntitySet<USER_USER> _USER_USERs;
		
		private EntityRef<CITY_CITY> _CITY_CITY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTOWN_IDChanging(int value);
    partial void OnTOWN_IDChanged();
    partial void OnTOWN_CityIDChanging(int value);
    partial void OnTOWN_CityIDChanged();
    partial void OnTOWN_NameChanging(string value);
    partial void OnTOWN_NameChanged();
    #endregion
		
		public TOWN_TOWN()
		{
			this._ADDR_ADDRESSes = new EntitySet<ADDR_ADDRESS>(new Action<ADDR_ADDRESS>(this.attach_ADDR_ADDRESSes), new Action<ADDR_ADDRESS>(this.detach_ADDR_ADDRESSes));
			this._USER_USERs = new EntitySet<USER_USER>(new Action<USER_USER>(this.attach_USER_USERs), new Action<USER_USER>(this.detach_USER_USERs));
			this._CITY_CITY = default(EntityRef<CITY_CITY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOWN_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TOWN_ID
		{
			get
			{
				return this._TOWN_ID;
			}
			set
			{
				if ((this._TOWN_ID != value))
				{
					this.OnTOWN_IDChanging(value);
					this.SendPropertyChanging();
					this._TOWN_ID = value;
					this.SendPropertyChanged("TOWN_ID");
					this.OnTOWN_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOWN_CityID", DbType="Int NOT NULL")]
		public int TOWN_CityID
		{
			get
			{
				return this._TOWN_CityID;
			}
			set
			{
				if ((this._TOWN_CityID != value))
				{
					if (this._CITY_CITY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTOWN_CityIDChanging(value);
					this.SendPropertyChanging();
					this._TOWN_CityID = value;
					this.SendPropertyChanged("TOWN_CityID");
					this.OnTOWN_CityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOWN_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TOWN_Name
		{
			get
			{
				return this._TOWN_Name;
			}
			set
			{
				if ((this._TOWN_Name != value))
				{
					this.OnTOWN_NameChanging(value);
					this.SendPropertyChanging();
					this._TOWN_Name = value;
					this.SendPropertyChanged("TOWN_Name");
					this.OnTOWN_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TOWN_TOWN_ADDR_ADDRESS", Storage="_ADDR_ADDRESSes", ThisKey="TOWN_ID", OtherKey="ADDR_TownID")]
		public EntitySet<ADDR_ADDRESS> ADDR_ADDRESSes
		{
			get
			{
				return this._ADDR_ADDRESSes;
			}
			set
			{
				this._ADDR_ADDRESSes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TOWN_TOWN_USER_USER", Storage="_USER_USERs", ThisKey="TOWN_ID", OtherKey="USER_Town")]
		public EntitySet<USER_USER> USER_USERs
		{
			get
			{
				return this._USER_USERs;
			}
			set
			{
				this._USER_USERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CITY_CITY_TOWN_TOWN", Storage="_CITY_CITY", ThisKey="TOWN_CityID", OtherKey="CITY_ID", IsForeignKey=true)]
		public CITY_CITY CITY_CITY
		{
			get
			{
				return this._CITY_CITY.Entity;
			}
			set
			{
				CITY_CITY previousValue = this._CITY_CITY.Entity;
				if (((previousValue != value) 
							|| (this._CITY_CITY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CITY_CITY.Entity = null;
						previousValue.TOWN_TOWNs.Remove(this);
					}
					this._CITY_CITY.Entity = value;
					if ((value != null))
					{
						value.TOWN_TOWNs.Add(this);
						this._TOWN_CityID = value.CITY_ID;
					}
					else
					{
						this._TOWN_CityID = default(int);
					}
					this.SendPropertyChanged("CITY_CITY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ADDR_ADDRESSes(ADDR_ADDRESS entity)
		{
			this.SendPropertyChanging();
			entity.TOWN_TOWN = this;
		}
		
		private void detach_ADDR_ADDRESSes(ADDR_ADDRESS entity)
		{
			this.SendPropertyChanging();
			entity.TOWN_TOWN = null;
		}
		
		private void attach_USER_USERs(USER_USER entity)
		{
			this.SendPropertyChanging();
			entity.TOWN_TOWN = this;
		}
		
		private void detach_USER_USERs(USER_USER entity)
		{
			this.SendPropertyChanging();
			entity.TOWN_TOWN = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.USER_USER")]
	public partial class USER_USER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _USER_ID;
		
		private string _USER_Email;
		
		private string _USER_Password;
		
		private int _USER_Town;
		
		private string _USER_Name;
		
		private string _USER_Surname;
		
		private string _USER_Phone;
		
		private string _USER_GSM;
		
		private int _USER_TYPE;
		
		private int _USER_Status;
		
		private string _USER_Activation;
		
		private EntitySet<ADDR_ADDRESS> _ADDR_ADDRESSes;
		
		private EntitySet<BASKT_BASKET> _BASKT_BASKETs;
		
		private EntitySet<COMM_COMMENT> _COMM_COMMENTs;
		
		private EntitySet<COUP_COUPON> _COUP_COUPONs;
		
		private EntitySet<ORDER_ORDER> _ORDER_ORDERs;
		
		private EntityRef<TOWN_TOWN> _TOWN_TOWN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUSER_IDChanging(int value);
    partial void OnUSER_IDChanged();
    partial void OnUSER_EmailChanging(string value);
    partial void OnUSER_EmailChanged();
    partial void OnUSER_PasswordChanging(string value);
    partial void OnUSER_PasswordChanged();
    partial void OnUSER_TownChanging(int value);
    partial void OnUSER_TownChanged();
    partial void OnUSER_NameChanging(string value);
    partial void OnUSER_NameChanged();
    partial void OnUSER_SurnameChanging(string value);
    partial void OnUSER_SurnameChanged();
    partial void OnUSER_PhoneChanging(string value);
    partial void OnUSER_PhoneChanged();
    partial void OnUSER_GSMChanging(string value);
    partial void OnUSER_GSMChanged();
    partial void OnUSER_TYPEChanging(int value);
    partial void OnUSER_TYPEChanged();
    partial void OnUSER_StatusChanging(int value);
    partial void OnUSER_StatusChanged();
    partial void OnUSER_ActivationChanging(string value);
    partial void OnUSER_ActivationChanged();
    #endregion
		
		public USER_USER()
		{
			this._ADDR_ADDRESSes = new EntitySet<ADDR_ADDRESS>(new Action<ADDR_ADDRESS>(this.attach_ADDR_ADDRESSes), new Action<ADDR_ADDRESS>(this.detach_ADDR_ADDRESSes));
			this._BASKT_BASKETs = new EntitySet<BASKT_BASKET>(new Action<BASKT_BASKET>(this.attach_BASKT_BASKETs), new Action<BASKT_BASKET>(this.detach_BASKT_BASKETs));
			this._COMM_COMMENTs = new EntitySet<COMM_COMMENT>(new Action<COMM_COMMENT>(this.attach_COMM_COMMENTs), new Action<COMM_COMMENT>(this.detach_COMM_COMMENTs));
			this._COUP_COUPONs = new EntitySet<COUP_COUPON>(new Action<COUP_COUPON>(this.attach_COUP_COUPONs), new Action<COUP_COUPON>(this.detach_COUP_COUPONs));
			this._ORDER_ORDERs = new EntitySet<ORDER_ORDER>(new Action<ORDER_ORDER>(this.attach_ORDER_ORDERs), new Action<ORDER_ORDER>(this.detach_ORDER_ORDERs));
			this._TOWN_TOWN = default(EntityRef<TOWN_TOWN>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int USER_ID
		{
			get
			{
				return this._USER_ID;
			}
			set
			{
				if ((this._USER_ID != value))
				{
					this.OnUSER_IDChanging(value);
					this.SendPropertyChanging();
					this._USER_ID = value;
					this.SendPropertyChanged("USER_ID");
					this.OnUSER_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string USER_Email
		{
			get
			{
				return this._USER_Email;
			}
			set
			{
				if ((this._USER_Email != value))
				{
					this.OnUSER_EmailChanging(value);
					this.SendPropertyChanging();
					this._USER_Email = value;
					this.SendPropertyChanged("USER_Email");
					this.OnUSER_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string USER_Password
		{
			get
			{
				return this._USER_Password;
			}
			set
			{
				if ((this._USER_Password != value))
				{
					this.OnUSER_PasswordChanging(value);
					this.SendPropertyChanging();
					this._USER_Password = value;
					this.SendPropertyChanged("USER_Password");
					this.OnUSER_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_Town", DbType="Int NOT NULL")]
		public int USER_Town
		{
			get
			{
				return this._USER_Town;
			}
			set
			{
				if ((this._USER_Town != value))
				{
					if (this._TOWN_TOWN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUSER_TownChanging(value);
					this.SendPropertyChanging();
					this._USER_Town = value;
					this.SendPropertyChanged("USER_Town");
					this.OnUSER_TownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string USER_Name
		{
			get
			{
				return this._USER_Name;
			}
			set
			{
				if ((this._USER_Name != value))
				{
					this.OnUSER_NameChanging(value);
					this.SendPropertyChanging();
					this._USER_Name = value;
					this.SendPropertyChanged("USER_Name");
					this.OnUSER_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_Surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string USER_Surname
		{
			get
			{
				return this._USER_Surname;
			}
			set
			{
				if ((this._USER_Surname != value))
				{
					this.OnUSER_SurnameChanging(value);
					this.SendPropertyChanging();
					this._USER_Surname = value;
					this.SendPropertyChanged("USER_Surname");
					this.OnUSER_SurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string USER_Phone
		{
			get
			{
				return this._USER_Phone;
			}
			set
			{
				if ((this._USER_Phone != value))
				{
					this.OnUSER_PhoneChanging(value);
					this.SendPropertyChanging();
					this._USER_Phone = value;
					this.SendPropertyChanged("USER_Phone");
					this.OnUSER_PhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_GSM", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string USER_GSM
		{
			get
			{
				return this._USER_GSM;
			}
			set
			{
				if ((this._USER_GSM != value))
				{
					this.OnUSER_GSMChanging(value);
					this.SendPropertyChanging();
					this._USER_GSM = value;
					this.SendPropertyChanged("USER_GSM");
					this.OnUSER_GSMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_TYPE", DbType="Int NOT NULL")]
		public int USER_TYPE
		{
			get
			{
				return this._USER_TYPE;
			}
			set
			{
				if ((this._USER_TYPE != value))
				{
					this.OnUSER_TYPEChanging(value);
					this.SendPropertyChanging();
					this._USER_TYPE = value;
					this.SendPropertyChanged("USER_TYPE");
					this.OnUSER_TYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_Status", DbType="Int NOT NULL")]
		public int USER_Status
		{
			get
			{
				return this._USER_Status;
			}
			set
			{
				if ((this._USER_Status != value))
				{
					this.OnUSER_StatusChanging(value);
					this.SendPropertyChanging();
					this._USER_Status = value;
					this.SendPropertyChanged("USER_Status");
					this.OnUSER_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_Activation", DbType="VarChar(50)")]
		public string USER_Activation
		{
			get
			{
				return this._USER_Activation;
			}
			set
			{
				if ((this._USER_Activation != value))
				{
					this.OnUSER_ActivationChanging(value);
					this.SendPropertyChanging();
					this._USER_Activation = value;
					this.SendPropertyChanged("USER_Activation");
					this.OnUSER_ActivationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_USER_ADDR_ADDRESS", Storage="_ADDR_ADDRESSes", ThisKey="USER_ID", OtherKey="ADDR_UserID")]
		public EntitySet<ADDR_ADDRESS> ADDR_ADDRESSes
		{
			get
			{
				return this._ADDR_ADDRESSes;
			}
			set
			{
				this._ADDR_ADDRESSes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_USER_BASKT_BASKET", Storage="_BASKT_BASKETs", ThisKey="USER_ID", OtherKey="BASKT_UserID")]
		public EntitySet<BASKT_BASKET> BASKT_BASKETs
		{
			get
			{
				return this._BASKT_BASKETs;
			}
			set
			{
				this._BASKT_BASKETs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_USER_COMM_COMMENT", Storage="_COMM_COMMENTs", ThisKey="USER_ID", OtherKey="COMM_UserID")]
		public EntitySet<COMM_COMMENT> COMM_COMMENTs
		{
			get
			{
				return this._COMM_COMMENTs;
			}
			set
			{
				this._COMM_COMMENTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_USER_COUP_COUPON", Storage="_COUP_COUPONs", ThisKey="USER_ID", OtherKey="COUP_UserID")]
		public EntitySet<COUP_COUPON> COUP_COUPONs
		{
			get
			{
				return this._COUP_COUPONs;
			}
			set
			{
				this._COUP_COUPONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_USER_ORDER_ORDER", Storage="_ORDER_ORDERs", ThisKey="USER_ID", OtherKey="ORDER_UserID")]
		public EntitySet<ORDER_ORDER> ORDER_ORDERs
		{
			get
			{
				return this._ORDER_ORDERs;
			}
			set
			{
				this._ORDER_ORDERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TOWN_TOWN_USER_USER", Storage="_TOWN_TOWN", ThisKey="USER_Town", OtherKey="TOWN_ID", IsForeignKey=true)]
		public TOWN_TOWN TOWN_TOWN
		{
			get
			{
				return this._TOWN_TOWN.Entity;
			}
			set
			{
				TOWN_TOWN previousValue = this._TOWN_TOWN.Entity;
				if (((previousValue != value) 
							|| (this._TOWN_TOWN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TOWN_TOWN.Entity = null;
						previousValue.USER_USERs.Remove(this);
					}
					this._TOWN_TOWN.Entity = value;
					if ((value != null))
					{
						value.USER_USERs.Add(this);
						this._USER_Town = value.TOWN_ID;
					}
					else
					{
						this._USER_Town = default(int);
					}
					this.SendPropertyChanged("TOWN_TOWN");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ADDR_ADDRESSes(ADDR_ADDRESS entity)
		{
			this.SendPropertyChanging();
			entity.USER_USER = this;
		}
		
		private void detach_ADDR_ADDRESSes(ADDR_ADDRESS entity)
		{
			this.SendPropertyChanging();
			entity.USER_USER = null;
		}
		
		private void attach_BASKT_BASKETs(BASKT_BASKET entity)
		{
			this.SendPropertyChanging();
			entity.USER_USER = this;
		}
		
		private void detach_BASKT_BASKETs(BASKT_BASKET entity)
		{
			this.SendPropertyChanging();
			entity.USER_USER = null;
		}
		
		private void attach_COMM_COMMENTs(COMM_COMMENT entity)
		{
			this.SendPropertyChanging();
			entity.USER_USER = this;
		}
		
		private void detach_COMM_COMMENTs(COMM_COMMENT entity)
		{
			this.SendPropertyChanging();
			entity.USER_USER = null;
		}
		
		private void attach_COUP_COUPONs(COUP_COUPON entity)
		{
			this.SendPropertyChanging();
			entity.USER_USER = this;
		}
		
		private void detach_COUP_COUPONs(COUP_COUPON entity)
		{
			this.SendPropertyChanging();
			entity.USER_USER = null;
		}
		
		private void attach_ORDER_ORDERs(ORDER_ORDER entity)
		{
			this.SendPropertyChanging();
			entity.USER_USER = this;
		}
		
		private void detach_ORDER_ORDERs(ORDER_ORDER entity)
		{
			this.SendPropertyChanging();
			entity.USER_USER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RandomView")]
	public partial class RandomView
	{
		
		private System.Nullable<System.Guid> _ID;
		
		public RandomView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
